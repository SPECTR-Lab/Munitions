c-----------------------------------------------------------------------
C
C  USER SPECIFIED ROUTINES:
C
C     - boundary conditions
C     - initial conditions
C     - variable properties
C     - local acceleration for fluid (a)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.
C
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)


c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).


      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      real x0(3)
      save x0
      data x0 /3*0/
      
      integer bIDs(1), iobj_wall(1)

c     define objects for surface integrals
      if (istep.eq.0) then
         bIDs(1) = 1
         call create_obj(iobj_wall(1),bIDs,1)
      endif 

!      call estimate_strouhal

      scale = 2.  ! Cd = F/(.5 rho U^2 ) = 2*F
      if (mod(istep,10).eq.0) call torque_calc(scale,x0,.true.,.false.)
      
!     write out probes
      if (mod(ISTEP,10).eq.0) call hpts()

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
c     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=1.0
      uy=0.0
      uz=0.0
      temp=0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=1.0
      uy=0.0
      uz=0.0
      temp=0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

c     call platform_timer(0) ! not too verbose
c     call platform_timer(1) ! mxm, ping-pong, and all_reduce timer

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

c     param(66) = 4.   ! These give the std nek binary i/o and are 
c     param(67) = 4.   ! good default values

c     mark faces for object definition
      nface = 2*ndim
      do iel=1,nelt
         do iface = 1, nface
            if (cbc(iface,iel,1) .eq. 'W  ') then
               boundaryID(iface,iel) = 1
            endif
         enddo 
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
c      subroutine estimate_strouhal
c
c      include 'SIZE'
c      include 'TOTAL'
c
c      real tlast,vlast,tcurr,vcurr,t0,t1
c      save tlast,vlast,tcurr,vcurr,t0,t1
c      data tlast,vlast,tcurr,vcurr,t0,t1 / 6*0 /
c
c      integer e,eg,eg0,e0
c
c      eg0 = 622          ! Identify element/processor in wake
c      mid = gllnid(eg0)
c      e0  = gllel (eg0)
c
c      st  = 0
c
c      if (nid.eq.mid) then
c
c         tlast = tcurr
c         vlast = vcurr
c
c        tcurr = time
c        vcurr = vy (1,ny1,1,e0)
c
c         xcurr = xm1(1,ny1,1,e0)
c         ycurr = ym1(1,ny1,1,e0)
c
c         write(6,2) istep,time,vcurr,xcurr,ycurr
c    2    format(i9,1p4e13.5,' vcurr')
c
c         if (vlast.gt.0.and.vcurr.le.0) then ! zero crossing w/ negative slope
c            t0  = t1
c            t1  = tlast + (tcurr-tlast)*(vlast-0)/(vlast-vcurr)
c            per = t1-t0
c            if (per.gt.0) st = 1./per
c         endif
c      endif
c
c      st = glmax(st,1)
c
c      n  = nx1*ny1*nz1*nelv
c      ux = glamax(vx,n)
c      uy = glamax(vy,n)
c
c      if (nid.eq.0.and.st.gt.0) write(6,1) istep,time,st,ux,uy
c    1 format(i5,1p4e12.4,' Strouhal')
c
c      return
c      end
c-----------------------------------------------------------------------
